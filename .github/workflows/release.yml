# SPDX-FileCopyrightText: 2024 Semiotic Labs
# SPDX-License-Identifier: Apache-2.0

name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag-name: ${{ steps.version.outputs.tag-name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.+)?$ ]]; then
              echo "Invalid version format: $VERSION"
              exit 1
            fi
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag-name=${VERSION}" >> $GITHUB_OUTPUT

  build-binaries:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: prepare-release
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.89.0"
          targets: ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.target }}
          cache-on-failure: true

      - name: Install cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross@0.2.5

      - name: Build binary
        run: |
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-gnu" ]; then
            cargo build --release --workspace
          else
            cross build --release --workspace --target ${{ matrix.target }}
          fi

      - name: Create binary archive
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ../../../nft-api-${{ needs.prepare-release.outputs.version }}-${{ matrix.target }}.tar.gz nft-api
          cd ../../..

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: nft-api-${{ needs.prepare-release.outputs.version }}-${{ matrix.target }}.tar.gz
          retention-days: 90

  build-container:
    name: Build Release Container
    runs-on: ubuntu-latest
    needs: prepare-release
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.prepare-release.outputs.tag-name }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.prepare-release.outputs.tag-name }}
            type=semver,pattern={{major}},value=${{ needs.prepare-release.outputs.tag-name }}
            type=raw,value=latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  security-scan:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-container]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-container.outputs.image-url }}
          format: 'sarif'
          output: 'trivy-release-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-release-results.sarif'

      - name: Run Trivy for blocking vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-container.outputs.image-url }}
          format: 'table'
          severity: 'CRITICAL'
          exit-code: '1'

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: prepare-release
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -n 2 | tail -n 1)
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi

          # Generate changelog
          CHANGELOG="## Changes in ${{ needs.prepare-release.outputs.tag-name }}

          $(git log ${PREVIOUS_TAG}..${{ needs.prepare-release.outputs.tag-name }} \
            --pretty=format:'- %s (%an)' \
            --no-merges | head -50)

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${{ needs.prepare-release.outputs.tag-name }}"

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-binaries, build-container, security-scan, generate-changelog]
    steps:
      - uses: actions/checkout@v4

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binary-*
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag-name }}
          name: ${{ needs.prepare-release.outputs.tag-name }}
          body: |
            ${{ needs.generate-changelog.outputs.changelog }}

            ## Container Images

            ```bash
            docker pull ${{ needs.build-container.outputs.image-url }}
            ```

            ## Binary Downloads

            Download the appropriate binary for your platform from the assets below.

            ## Security

            - ✅ Container image scanned for vulnerabilities
            - ✅ Binaries built with Rust stable toolchain
            - ✅ Supply chain attestations available
            - ✅ SBOM included with container image

            ## Verification

            Container image digest: `${{ needs.build-container.outputs.image-digest }}`
          files: |
            nft-api-*.tar.gz
          draft: false
          prerelease: ${{ contains(needs.prepare-release.outputs.tag-name, '-') }}
          generate_release_notes: false

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [create-release, build-container]
    environment: staging
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Deploy to staging environment
        run: |
          echo "Deploying ${{ needs.build-container.outputs.image-url }} to staging"
          echo "Image digest: ${{ needs.build-container.outputs.image-digest }}"
          echo "This step would trigger your staging deployment process"
          # Add your staging deployment logic here

  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [prepare-release, build-binaries, build-container, security-scan, create-release]
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "## Release Summary for ${{ needs.prepare-release.outputs.tag-name }}" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Binary Build | ${{ needs.build-binaries.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Build | ${{ needs.build-container.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.create-release.result }} |" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-binaries.result }}" == "success" ] && \
             [ "${{ needs.build-container.result }}" == "success" ] && \
             [ "${{ needs.security-scan.result }}" == "success" ] && \
             [ "${{ needs.create-release.result }}" == "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Release ${{ needs.prepare-release.outputs.tag-name }} completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🚀 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.tag-name }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Release ${{ needs.prepare-release.outputs.tag-name }} had failures**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
